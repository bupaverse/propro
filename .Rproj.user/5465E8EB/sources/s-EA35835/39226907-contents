create_propro <- function(eventlog, PN) {


    net <- PN

    add_end_transition(net, net$final_marking) -> net


    eventlog %>%
        add_end_activity("End") %>%
        propro::check_fitting(net) -> complete_eventlog

    complete_eventlog %>%
        filter(is_fitting) -> eventlog

    list_of_traces <- complete_eventlog %>%
        group_by(is_fitting) %>%
        traces()

    print(eventlog)

    eventlog %>%
        traces %>%
        mutate(components = map(trace, str_split, ",")) %>%
        mutate(components = map(components, ~data_frame(component = unlist(.x)) %>% mutate(position = 1:length(unlist(.x))))) %>%
        unnest() %>%
        group_by(trace) %>%
        mutate(prefix = accumulate(component, paste)) %>%
        select(trace, prefix, position, component) %>%
        group_by(trace) %>%
        mutate(from_state = lag(prefix,default = "0"),
               to_state = prefix) %>%
        ungroup() -> prefixes

    prefixes %>%
        select(component:to_state) %>%
        distinct() -> edges

    edges %>%
        select(-component) %>%
        gather(key, node) %>%
        select(node) %>%
        distinct() %>%
        mutate(node_id = 1:n()) -> nodes

    nodes %>%
        mutate(activities = str_split(node, " ")) %>%
        mutate(activities = map(activities, ~.x[.x != "0"])) %>%
        mutate(enabled_transitions = map(activities, ~enabled(petrinetR::parse(net, .x)))) %>%
        select(-activities) %>%
        unnest() -> nodes_enabled

    edges %>%
        left_join(nodes, by = c("from_state" = "node")) %>%
        rename(from_node_id = node_id) %>%
        left_join(nodes, by = c("to_state" = "node")) %>%
        rename(to_node_id = node_id) -> edges

    nodes_enabled %>%
        left_join(edges, by = c("node" = "from_state", "id" = "component")) %>%
        mutate(to_state = str_remove(str_c(node, id, sep = " "), "0 ")) %>%
        mutate(edge_type = ifelse(is.na(from_node_id), "escaping","normal")) %>%
        select(from_state = node, to_state, rel = id, edge_type) -> edges

    edges %>%
        select(-rel) %>%
        gather(key, node, -edge_type) %>%
        filter(!(edge_type == "escaping" & key == "from_state")) %>%
        rename(node_type = edge_type) %>%
        select(-key) %>%
        distinct() %>%
        mutate(node_id = 1:n()) -> nodes

    edges %>%
        left_join(nodes, by = c("from_state" = "node")) %>%
        rename(from_node_id = node_id) %>%
        select(-node_type) %>%
        left_join(nodes, by = c("to_state" = "node")) %>%
        select(-node_type) %>%
        rename(to_node_id = node_id) -> edges

        edges %>%
            group_by(from_state) %>%
            filter(n() > 1) %>%
            arrange(from_state) %>%
            ungroup() %>%
            mutate(choice_id = dense_rank(from_state)) %>%
            arrange(rel) %>%
            mutate(last = row_number(rel) == max(row_number(rel))) %>%
            arrange(choice_id) %>%
            mutate(choice = paste0("beta", "[",1:n(), "]")) %>%
            ungroup()  %>%
            select(from_state, to_state, choice, choice_id) -> choices



    edges %>%
        left_join(choices) %>%
        mutate(choice = ifelse(is.na(choice), " ", choice)) -> edges

    prefixes %>%
        #prefix -> contains only info on observed paths
        left_join(choices)  %>%
        #mutate(is_end_state = !(to_state %in% from_state))
        filter(!is.na(choice)) %>%
        group_by(trace) %>%
        summarize(total_choice = paste(choice, collapse = "*")) %>%
        mutate(theta = glue("theta[{1:nrow(.)}]")) %>%
        mutate(model_spec = glue("{theta} <- {total_choice}")) %>%
        arrange(desc(trace)) -> trace_probabilities

    prefixes %>%
        #prefix -> contains only info on observed paths
        left_join(choices)  %>%
        group_by(trace) %>%
        arrange(position) %>%
        mutate(total_choice = str_remove(accumulate(choice, paste, sep = "*"), "NA\\*")) %>%
        mutate(total_choice = str_remove(total_choice, "\\*NA")) %>%
        mutate(total_choice = str_replace_na(total_choice, "")) %>%
        ungroup() %>%
        distinct(prefix, total_choice) -> prefix_probabilities

    edges %>%
        filter(edge_type == "escaping") -> escaping_edges

    if(nrow(escaping_edges) == 0) {
        escaping_arcs <- FALSE
    } else {
        escaping_arcs <- TRUE
    }

    if(escaping_arcs) {
        escaping_edges %>%
            select(from_state, choice, to_state) %>%
            left_join(prefix_probabilities, by = c("from_state" = "prefix")) %>%
            transmute(escaping_state = to_state, total_choice = paste(total_choice, choice, sep = "*"))  %>%
            summarize(total_choice = paste0("theta_u <- ", paste("beta_f", paste0(total_choice, collapse = " + "), sep = "*"))) -> escaping_probabilities
    }

    trace_probabilities %>%
        mutate(total_choice = str_c("beta_f", total_choice,  sep = "*")) %>%
        mutate(theta = glue("theta[{1:nrow(.)}]")) %>%
        mutate(model_spec = glue("{theta} <- {total_choice}")) -> model_traces




    if(escaping_arcs) {
        escaping_probabilities %>%
            transmute(trace = "unobserved",theta = glue("theta[{nrow(model_traces)+2}]"),
                      model_spec = str_replace(total_choice, "_u", glue("[{nrow(model_traces)+2}]"))) -> model_unobserved
    } else {
        model_unobserved <- data.frame()
    }

    data_frame(trace = "unfitting", total_choice = "(1-beta_f)") %>%
        mutate(theta = glue("theta[{nrow(model_traces)+1}]")) %>%
        mutate(model_spec = glue("{theta} <- {total_choice}")) -> model_unfitting

    model_traces %>%
        bind_rows(model_unfitting) %>%
        bind_rows(model_unobserved) -> model_spec_traces

    n <- nrow(model_spec_traces)

    y <- glue("y[1:{n}] ~ dmulti(theta[1:{n}], N)")


    choices %>%
        select(choice, choice_id) %>%
        rename(prior = choice) %>%
        unique() %>%
        filter(!str_detect(prior, "\\(")) %>%
        bind_rows(tibble(prior = "beta_f")) -> model_priors
        # mutate(prior = glue("eta[{1:nrow(.)}]")) %>%
        # mutate(model_spec = glue("{prior} ~ dnorm(0.0, 0.001)")) %>%
        # mutate(model_spec2 = glue("expeta[{1:nrow(.)}] <- exp(eta[{1:nrow(.)}])")) %>%
        # mutate(model_spec3 = glue("{choice} <- expeta[{1:nrow(.)}]/(expeta[{1:nrow(.)}] + 1)")


    params <- c(model_spec_traces$theta, model_priors$prior)


    data <- list(y = model_spec_traces %>%
                      left_join(list_of_traces) %>%
                      mutate(absolute_frequency = ifelse(trace == "unfitting",
                                                         filter(list_of_traces, !is_fitting) %>% pull(absolute_frequency) %>% sum,
                                                         absolute_frequency)) %>%
                      mutate(absolute_frequency = ifelse(trace == "unobserved", 0, absolute_frequency)) %>%
                      pull(absolute_frequency),
                  N = n_cases(eventlog))

    return(list(y = y, traces = model_spec_traces, priors = model_priors, edges = edges, nodes = nodes, params = params, data = data))


}
